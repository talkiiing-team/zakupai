/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as IndexImport } from './../routes/index'
import { Route as SchedulersIndexImport } from './../routes/schedulers/index'
import { Route as NotificationChannelsIndexImport } from './../routes/notification-channels/index'
import { Route as DashboardsIndexImport } from './../routes/dashboards/index'
import { Route as DashboardsIdImport } from './../routes/dashboards/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SchedulersIndexRoute = SchedulersIndexImport.update({
  id: '/schedulers/',
  path: '/schedulers/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationChannelsIndexRoute = NotificationChannelsIndexImport.update({
  id: '/notification-channels/',
  path: '/notification-channels/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsIndexRoute = DashboardsIndexImport.update({
  id: '/dashboards/',
  path: '/dashboards/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsIdRoute = DashboardsIdImport.update({
  id: '/dashboards/$id',
  path: '/dashboards/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/$id': {
      id: '/dashboards/$id'
      path: '/dashboards/$id'
      fullPath: '/dashboards/$id'
      preLoaderRoute: typeof DashboardsIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/': {
      id: '/dashboards/'
      path: '/dashboards'
      fullPath: '/dashboards'
      preLoaderRoute: typeof DashboardsIndexImport
      parentRoute: typeof rootRoute
    }
    '/notification-channels/': {
      id: '/notification-channels/'
      path: '/notification-channels'
      fullPath: '/notification-channels'
      preLoaderRoute: typeof NotificationChannelsIndexImport
      parentRoute: typeof rootRoute
    }
    '/schedulers/': {
      id: '/schedulers/'
      path: '/schedulers'
      fullPath: '/schedulers'
      preLoaderRoute: typeof SchedulersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboards/$id': typeof DashboardsIdRoute
  '/dashboards': typeof DashboardsIndexRoute
  '/notification-channels': typeof NotificationChannelsIndexRoute
  '/schedulers': typeof SchedulersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboards/$id': typeof DashboardsIdRoute
  '/dashboards': typeof DashboardsIndexRoute
  '/notification-channels': typeof NotificationChannelsIndexRoute
  '/schedulers': typeof SchedulersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboards/$id': typeof DashboardsIdRoute
  '/dashboards/': typeof DashboardsIndexRoute
  '/notification-channels/': typeof NotificationChannelsIndexRoute
  '/schedulers/': typeof SchedulersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboards/$id'
    | '/dashboards'
    | '/notification-channels'
    | '/schedulers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboards/$id'
    | '/dashboards'
    | '/notification-channels'
    | '/schedulers'
  id:
    | '__root__'
    | '/'
    | '/dashboards/$id'
    | '/dashboards/'
    | '/notification-channels/'
    | '/schedulers/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardsIdRoute: typeof DashboardsIdRoute
  DashboardsIndexRoute: typeof DashboardsIndexRoute
  NotificationChannelsIndexRoute: typeof NotificationChannelsIndexRoute
  SchedulersIndexRoute: typeof SchedulersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardsIdRoute: DashboardsIdRoute,
  DashboardsIndexRoute: DashboardsIndexRoute,
  NotificationChannelsIndexRoute: NotificationChannelsIndexRoute,
  SchedulersIndexRoute: SchedulersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboards/$id",
        "/dashboards/",
        "/notification-channels/",
        "/schedulers/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboards/$id": {
      "filePath": "dashboards/$id.tsx"
    },
    "/dashboards/": {
      "filePath": "dashboards/index.tsx"
    },
    "/notification-channels/": {
      "filePath": "notification-channels/index.tsx"
    },
    "/schedulers/": {
      "filePath": "schedulers/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
